{
	"createPromise": "const executor = (resolve, reject) => {\n  if (\"everything ok\") {\n    resolve(\"succeed with some result\"); // when promise succeed\n  } else {\n    reject(new Error(\"failed because of ...\")); // when promise failed\n  }\n\n  return \"Return something\"; // ingore return from func executor\n};\n\nconst promise = new Promise(executor);\n\npromise.then((result) => {\n  console.log(result); // Expected output: \"some succeed result\"\n});\n\n// === several resolve, reject call ===\n\nconst executor1 = (resolve, reject) => {\n  resolve(\"succeed only first resolve!\");\n\n  reject(new Error(\"failed because of ...\")); // ignored\n  resolve(\"some new result\"); // ignored\n};\n\nconst promise1 = new Promise(executor1);\n\npromise1.then((result) => {\n  console.log(result); // Expected output: \"succeed only first resolve!\"\n});\n",
	"then": "const instancePromise = new Promise((resolve, reject) => {\n  resolve(\"Succeed!\");\n});\n\ninstancePromise.then(\n  (result) => console.log(result), //Expected output: \"Succeed!\"\n  (error) => console.log(error) // ignored\n);\n\n// ====\n\nconst instancePromise1 = new Promise((resolve, reject) => {\n  reject(new Error(\"failed because of ... \"));\n});\n\ninstancePromise1.then(\n  (result) => console.log(result), // ignored\n  (error) => console.log(error) //Expected output: \"failed because of ... \"\n);\n",
	"catch": "const instancePromise = new Promise((resolve, reject) => {\n  reject(new Error(\"failed because of ... \"));\n});\n\ninstancePromise.then(\n  null,\n  (error) => console.log(error) //Expected output: \"failed because of ... \"\n);\n\n// equal snippets\n\ninstancePromise.catch(\n  (error) => console.log(error) //Expected output: \"failed because of ... \"\n);\n"
}
