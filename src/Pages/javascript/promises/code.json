{
	"createPromise": "const executor = (resolve, reject) => {\n  if (\"everything ok\") {\n    resolve(\"succeed with some result\"); // when promise succeed\n  } else {\n    reject(new Error(\"failed because of ...\")); // when promise failed\n  }\n\n  return \"Return something\"; // ingore return from func executor\n};\n\nconst promise = new Promise(executor);\n\npromise.then((result) => {\n  console.log(result); // Expected output: \"some succeed result\"\n});\n\n// === several resolve, reject call ===\n\nconst executor1 = (resolve, reject) => {\n  resolve(\"succeed only first resolve!\");\n\n  reject(new Error(\"failed because of ...\")); // ignored\n  resolve(\"some new result\"); // ignored\n};\n\nconst promise1 = new Promise(executor1);\n\npromise1.then((result) => {\n  console.log(result); // Expected output: \"succeed only first resolve!\"\n});\n",
	"then": "const instancePromise = new Promise((resolve, reject) => {\n  resolve(\"Succeed!\");\n});\n\ninstancePromise.then(\n  (result) => console.log(result), //Expected output: \"Succeed!\"\n  (error) => console.log(error) // ignored\n);\n\n// ====\n\nconst instancePromise1 = new Promise((resolve, reject) => {\n  reject(new Error(\"failed because of ... \"));\n});\n\ninstancePromise1.then(\n  (result) => console.log(result), // ignored\n  (error) => console.log(error) //Expected output: \"failed because of ... \"\n);\n",
	"catch": "const instancePromise = new Promise((resolve, reject) => {\n  reject(new Error(\"failed because of ... \"));\n});\n\ninstancePromise.then(\n  null,\n  (error) => console.log(error) //Expected output: \"failed because of ... \"\n);\n\n// equal snippets\n\ninstancePromise.catch(\n  (error) => console.log(error) //Expected output: \"failed because of ... \"\n);\n",
	"finally": "let isLoading = true;\n\nfetch(\"Some request\")\n  .then((response) => {\n    // some work flow with response\n  })\n  .catch((error) => {\n    // some work flow with error\n  })\n  .finally(() => {\n    isLoading = false; // some cleanup\n  });\n",
	"all" : "const promise1 = Promise.resolve(10);\nconst promise2 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"Succeed!\");\n  }, 1000);\n});\nconst nonPromiseValue = 1; // non-promise value ignored but\n// returned in promise array value\n\nconst interable = [promise1, promise2, nonPromiseValue];\n\nPromise.all(interable).then((values) => {\n  console.log(values); //Expected output: [10, \"Succeed!\", 1]\n});\n\nconst promise3 = Promise.reject(\"Some reason\");\nconst promise4 = Promise.resolve(\"Some succeed result\");\n\nconst iterable1 = [promise3, promise4];\n\nPromise.all(iterable1)\n  .then((result) => {\n    console.log(result); // ignored\n  })\n  .catch((error) => {\n    console.log(error); ////Expected output: Some reason\n  });\n",
	"allSettled": "const promise1 = Promise.reject(\"Some reason\");\nconst promise2 = Promise.resolve(\"Some succeed result\");\n\nconst iterable = [promise1, promise2];\n\nPromise.allSettled(iterable).then((results) => {\n  console.log(results);\n  // Expected output:\n  // [\n  //   {\n  //     status: \"rejected\",\n  //     reason: \"Some reason\"\n  //   },\n  //   {\n  //     status: \"fulfilled\",\n  //     value: \"Some succeed result\"\n  //   }\n  // ]\n});\n\nconst promise3 = Promise.resolve(1);\nconst promise4 = Promise.reject(\"an error\");\nconst nonPromiseValue = 10; // non-promise value\n\nconst iterable1 = [promise3, promise4, nonPromiseValue];\n\nPromise.allSettled(iterable1).then((results) => {\n  console.log(results);\n  // Expected output:\n  // [\n  //   {\n  //     status: \"fulfilled\",\n  //     value: 1\n  //   },\n  //   {\n  //     status: \"rejected\",\n  //     reason: \"an error\"\n  //   },\n  //   {\n  //     status: \"fulfilled\",\n  //     value: 10\n  //   }\n  // ]\n});\n"
}
