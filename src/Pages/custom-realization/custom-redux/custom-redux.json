{
	"redux": "const createStore = (reducer, initialState) => {\n\tlet state = initialState;\n\treturn {\n\t\tdispatch: action => {\n\t\t\tstate = reducer(state, action);\n\t\t},\n\t\tgetState: () => state,\n\t};\n};",
	"reduxUsage": "// initialization reducer\nconst reducer = (state, action) => {\n\tswitch (action.type) {\n\tcase 'SOME TYPE':\n\t\treturn [...state, {id:action.id, someValue: action.someValue}];\n\tdefault :\n\t\treturn state;\n\t}\n};\n// initialization state\nconst initialState = [];\n// create store\nconst store = createStore(reducer, initialState);\n\nconst someAction = {type: 'SOME TYPE', someValue: 'someValue'};\n// dispatch action\nstore.dispatch(someAction);\n// get state from store\nconst state = store.getState();",
	"combineReducers": "const combineReducers = (reducersObj) => {\n\t// get reducer keys\n\tconst reducerNames = Object.keys(reducersObj);\n\n\treturn function (state={}, action) {\n\t\t// common recuder\n\t\tconst commonReducer = {};\n\t\t// loop reducer keys\n\t\tfor (let i = 0; i < reducerNames.length; i++) {\n\t\t\t// current key\n\t\t\tconst key = reducerNames[i];\n\t\t\t// current reducer\n\t\t\tconst reducer = reducersObj[key];\n\t\t\t// current state\n\t\t\tconst currentStateByKey = state[key];\n\t\t\t// updated state\n\t\t\tconst updatedStateByKey = reducer(currentStateByKey, action);\n\t\t\t// Update the new state for the current reducer\n\t\t\tcommonReducer[key] = updatedStateByKey;\n\t\t}\n\t\treturn commonReducer;\n\t};\n};"
}
