{
	"debounce": "const debounce = (fn, delay) => {\n\tlet timer;\n\treturn () => {\n\t\tclearTimeout(timer);\n\t\ttimer = setTimeout(() => {\n\t\t\tfn.apply();\n\t\t}, delay);\n\t};\n};\n\nfunction consoleLog() {\n\tconsole.log(\"debounced function\");\n}\n\nconst debouncedFunc = debounce(consoleLog, 1000);\ndebouncedFunc();\n",
	"memoize": "const memoizeMultiArgs = (fn) => {\n  if (typeof fn !== \"function\") {\n    console.error(new Error(\"argument must be a function\"));\n    return;\n  }\n  const cache = new Map();\n  return (...args) => {\n    const strArgs = JSON.stringify(args);\n    if (!cache.has(strArgs)) {\n      cache.clear();\n      console.log(\"new count\");\n      const result = fn.apply(null, args);\n      cache.set(strArgs, result);\n      return result;\n    } else {\n      console.log(\"cache\");\n      return cache.get(strArgs);\n    }\n  };\n};"
}
